@page "/customer/transaction";
@using Models;
@using Services;
@inject ApplicantService applicantService;
@inject UserService userService;
@inject CustomerService customerService;
@inject NavigationManager navigationManager;

<h3>Transaction</h3>
@if (isTransactionInProgress)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
}
<div class="d-flex justify-content-center">
    <div class= "col-xl-7 col-md-12 m-4 shadow p-5 mb-5 bg-white rounded">
        <form class="g-3" @onsubmit="submitData">
            <p class="text-center">Add transaction</p>


            <div class="form-group row m-0 mt-2">
                <label for="customerName" class="col-sm-5 col-form-label">Account Number:</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="inputEmail4" placeholder="Account Number" @bind-value="transaction.AccountId" />
                </div>
            </div>

            <div class="form-group row m-0 mt-2">
                <label for="customerName" class="col-sm-5 col-form-label">Transaction Type:</label>
                <div class="col-sm-7">
                    <select id="inputState" class="form-select" @onchange="OnChangeValue">
                        <option value="@TransactionType.CREDIT" selected>Credit</option>
                        <option value="@TransactionType.TRANSFER">Transfer</option>
                    </select>
                </div>
            </div>

            @if (showDepositorDiv)
            {
                <div class="form-group row m-0 mt-2">
                    <label for="customerName" class="col-sm-5 col-form-label">Depositor Account Id:</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" id="inputEmail4" placeholder="Account Number" @bind="transaction.DepositorAccountId" />
                    </div>
                </div>
            }

            <div id="transferDiv" class="form-group row m-0 mt-2" style="display: none;">
                <label for="transferDetails" class="col-sm-5 col-form-label">Transfer Details:</label>
                <div class="col-sm-7">
                    <!-- Content of the div to be toggled -->
                    <!-- Example content: -->
                    <input type="text" class="form-control" id="transferDetails" placeholder="Transfer details" @bind="transaction.DepositorAccountId">
                </div>
            </div>


            <div class="form-group row m-0 mt-2">
                <label for="customerName" class="col-sm-5 col-form-label">Amount:</label>
                <div class="col-sm-7">
                    <input type="number" class="form-control" id="inputAddress" placeholder="0.00" @bind="transaction.Amount">
                </div>
            </div>

            <div class="col-12 text-center mt-2">
                <button type="submit" class="btn btn-primary" disabled="@isTransactionInProgress"> Add Transaction</button>
            </div>

        </form>
    </div>
</div>
@code {
    bool isTransactionInProgress = false;
    public TransactionExtended transaction;
    bool showDepositorDiv = false;
    Applicant applicantDetails;
    Account accountDetails;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync(); 
        transaction = new TransactionExtended();
        transaction.AccountId = Guid.Empty;
        transaction.DepositorAccountId = Guid.Empty;
        showDepositorDiv = false;
        isTransactionInProgress = false;
        applicantDetails = await userService.GetCustomerDetailFromLocalStorage();
        accountDetails = await this.customerService.GetAccountByCustomerId(applicantDetails.Customer.CustomerId);
        transaction.AccountId = accountDetails.AccountId;
    }

    public async Task submitData()
    {
        isTransactionInProgress = true;
        var response = await applicantService.AddTransaction(transaction);
        isTransactionInProgress = false;
        if(response!=null)
        {
            navigationManager.NavigateTo("Dashboard");
        }

    }

    public void OnChangeValue(ChangeEventArgs changeEventArgs)
    {

        if (Enum.TryParse<TransactionType>(changeEventArgs.Value.ToString(), out var selectedType))
        {
            transaction.TransactionType = selectedType;
            showDepositorDiv = transaction.TransactionType.Equals(TransactionType.TRANSFER);
        }
    }
}
